{"version":3,"file":"static/js/802.f5d63111.chunk.js","mappings":"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","sources":["Api/Api.jsx","components/Searchbar/Searchbar.styled.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/MoviesPage.styled.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'b1182fc6a17a9d116199a570dc720d86';\n\n// самые популярные фильмы\nexport async function fetchTrendingMovies() {\n  const response = await axios.get(`/trending/all/day?api_key=${API_KEY}`);\n  return response.data.results;\n}\n// поиск фильмов\nexport async function fetchMoviesSearch(query) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  return response.data.results;\n}\n// информация о фильме\nexport async function fetchMoviesById(id) {\n  const response = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n}\n// информация об актёрах\nexport async function fetchMoviesCast(id) {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n}\n// отзывы о фильмах\nexport async function fetchReviews(id) {\n  const response = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n}\n","import style from '@emotion/styled';\n\nexport const SearchHeader = style.header`\n top: 0;\n  left: 0;\n  position: sticky;\n  z-index: 1100;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 64px;\n  padding-right: 24px;\n  padding-left: 24px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  color: #fff;\n  background-color: rgba(213, 221, 232, 0.85);\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);`;\n\nexport const SearchForm = style.form`\ndisplay: flex;\n  align-items: center;\n  width: 100%;\n  max-width: 600px;\n  background-color: rgba(213, 221, 232, 0.85);\n  border-radius: 15px;\n  overflow: hidden;\n  box-shadow: rgb(50 50 93 / 25%) 0px 50px 100px -20px, rgb(0 0 0 / 30%) 0px 30px 60px -30px;\n  `;\n\nexport const SearchButton = style.button`\ndisplay: inline-block;\n  width: 80px;\n  height: 48px;\n  border: 0;\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  background-color: #ff6b08;\n  opacity: 0.7;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  text-transform: uppercase;\n  &:hover {\n  opacity: 1;\n}`;\n\nexport const SearchLabel = style.label`\nposition: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;`;\n\nexport const SearchInput = style.input`\ndisplay: inline-block;\n  width: 100%;\n  height: 48px;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 10px;\n  padding-right: 4px;\n  &::placeholder {\n  font: inherit;\n  font-size: 18px;\n}`;\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { FcSearch } from 'react-icons/fc';\nimport {\n  SearchHeader,\n  SearchForm,\n  SearchInput,\n  SearchButton,\n  SearchLabel,\n} from './Searchbar.styled';\n\nexport default function Searchbar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (query.trim() === '') {\n      return toast.warn('Enter your search query, please.');\n    }\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <SearchHeader>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchInput\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Enter movie name...\"\n          value={query}\n          onChange={handleChange}\n        />\n        <SearchButton type=\"submit\">\n          <SearchLabel>Search</SearchLabel>\n          <FcSearch style={{ width: 30, height: 30 }} />\n        </SearchButton>\n        <SearchLabel></SearchLabel>\n      </SearchForm>\n    </SearchHeader>\n  );\n}\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import style from '@emotion/styled';\n\nexport const MoviesList = style.ul``;\nexport const MoviesInput = style.li``;\n","import { useState, useEffect } from 'react';\nimport { useLocation, useSearchParams, Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport Searchbar from '../../components/Searchbar/Searchbar';\nimport Loader from '../../components/Loader/Loader';\nimport { fetchMoviesSearch } from '../../Api/Api';\nimport { MoviesList, MoviesInput } from './MoviesPage.styled';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('query') ?? '');\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const location = useLocation();\n\n  const handleFormSubmit = query => {\n    setQuery(query);\n    setSearchParams({ query: query });\n    setData([]);\n  };\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    setLoading(true);\n    fetchMoviesSearch(query).then(data => {\n      if (data.length === 0) {\n        toast.error(\n          `Sorry, the movie with the title ${query}is not found. Enter another name`\n        );\n      }\n      setData(data);\n      setLoading(false);\n    });\n  }, [query]);\n\n  return (\n    <>\n      <Searchbar onSubmit={handleFormSubmit} />\n      {loading && <Loader />}\n      {data && (\n        <MoviesList>\n          {data.map(data => (\n            <MoviesInput key={data.id}>\n              <Link to={`${data.id}`} state={{ from: location }}>\n                {data.title ? data.title : data.name}\n              </Link>\n            </MoviesInput>\n          ))}\n        </MoviesList>\n      )}\n    </>\n  );\n}\n"],"names":["axios","API_KEY","fetchTrendingMovies","response","data","results","fetchMoviesSearch","query","fetchMoviesById","id","fetchMoviesCast","cast","fetchReviews","SearchHeader","style","SearchForm","SearchButton","SearchLabel","SearchInput","Searchbar","onSubmit","useState","setQuery","e","preventDefault","trim","toast","type","autoComplete","autoFocus","placeholder","value","onChange","currentTarget","toLowerCase","width","height","MoviesList","MoviesInput","Movies","useSearchParams","searchParams","setSearchParams","get","setData","loading","setLoading","location","useLocation","useEffect","then","length","Loader","map","to","state","from","title","name"],"sourceRoot":""}